ربات مدیریت گروه تلگرام حرفه‌ای با قابلیت ترجمه، آمار، خوش‌آمدگویی تصویری و دانلودر

import os import yt_dlp import logging import datetime import translators as ts from telegram import Update, ChatMember, ChatAction, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, MessageEntity from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext from collections import defaultdict from apscheduler.schedulers.background import BackgroundScheduler

تنظیمات لاگ

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO) logger = logging.getLogger(name)

دیتابیس موقتی آمار

message_count = defaultdict(int) user_data = defaultdict(lambda: {'count': 0, 'hours': set()})

لیست‌های مدیریتی

silent_list = set() ban_list = set() special_users = set() custom_welcome = {'photo': None, 'text': 'خوش آمدی!'}

ترجمه پیام ریپلای‌شده

langs = ['en', 'ar', 'hi'] def translate_reply(update: Update, context: CallbackContext): try: if update.message.reply_to_message: original_text = update.message.reply_to_message.text translated = ts.translate_text(original_text, to_language='fa') update.message.reply_text(f"ترجمه: {translated}") else: update.message.reply_text("⚠️ لطفاً این دستور را روی یک پیام ارسال کنید.") except Exception as e: update.message.reply_text("⚠️ خطا در ترجمه. لطفاً بعداً تلاش کنید.")

بررسی ادمین بودن

def is_admin(update: Update, user_id): try: member = update.effective_chat.get_member(user_id) return member.status in [ChatMember.ADMINISTRATOR, ChatMember.CREATOR] except: return False

فرمان بن (فارسی یا انگلیسی)

def ban_command(update: Update, context: CallbackContext): if not is_admin(update, update.effective_user.id): return if update.message.reply_to_message: user_id = update.message.reply_to_message.from_user.id ban_list.add(user_id) update.message.reply_text("کاربر بن شد.") elif context.args: try: user_id = int(context.args[0]) ban_list.add(user_id) update.message.reply_text(f"کاربر {user_id} بن شد.") except: update.message.reply_text("آیدی نامعتبر است.")

خوش‌آمدگویی تصویری سفارشی

def set_welcome_photo(update: Update, context: CallbackContext): if not is_admin(update, update.effective_user.id): return if update.message.reply_to_message and update.message.reply_to_message.photo: file_id = update.message.reply_to_message.photo[-1].file_id custom_welcome['photo'] = file_id update.message.reply_text("📷 عکس خوش‌آمدگویی تنظیم شد.")

def set_welcome_text(update: Update, context: CallbackContext): if not is_admin(update, update.effective_user.id): return text = update.message.text.replace('متن خوش آمد', '').strip() custom_welcome['text'] = text update.message.reply_text("✏️ متن خوش‌آمدگویی بروزرسانی شد.")

def welcome_new_member(update: Update, context: CallbackContext): for member in update.message.new_chat_members: if custom_welcome['photo']: context.bot.send_photo( chat_id=update.effective_chat.id, photo=custom_welcome['photo'], caption=custom_welcome['text'] ) else: update.message.reply_text(custom_welcome['text'])

پیام در گوشی (فقط برای یک کاربر خاص)

def secret_message(update: Update, context: CallbackContext): if update.message.reply_to_message: user_id = update.message.reply_to_message.from_user.id context.bot.send_message(chat_id=user_id, text=f"📩 پیام در گوشی: {update.message.text.replace('پیام در گوشی', '').strip()}") update.message.reply_text("✅ ارسال شد.")

آمار کاربران

def stats_scheduler(): message_count.clear()

def stats_handler(update: Update, context: CallbackContext): today = sum(message_count.values()) top_users = sorted(user_data.items(), key=lambda x: x[1]['count'], reverse=True) week_total = sum(u['count'] for u in user_data.values()) actives = sum(1 for u in user_data.values() if u['count'] > 0)

text = f"📊 آمار امروز: {today}\n🗓 پیام‌های هفته: {week_total}\n👥 کاربران فعال: {actives}\n🏆 رتبه‌ها:\n"
for i, (user, data) in enumerate(top_users[:5], start=1):
    text += f"{i}. {user}: {data['count']} پیام\n"
update.message.reply_text(text)

پروفایل کاربر

def profile(update: Update, context: CallbackContext): user = update.effective_user data = user_data[user.id] all_users = sorted(user_data.items(), key=lambda x: x[1]['count'], reverse=True) rank = next((i for i, (u, _) in enumerate(all_users, start=1) if u == user.id), '-') hours = ', '.join(str(h) for h in sorted(data['hours'])) text = f"👤 نام: {user.full_name}\n📨 پیام‌ها: {data['count']}\n🕒 ساعات فعالیت: {hours}\n🏅 رتبه: {rank}" update.message.reply_text(text)

آمارگیر خودکار

scheduler = BackgroundScheduler() scheduler.add_job(stats_scheduler, 'cron', day_of_week='mon') scheduler.start()

افزایش شمارنده آمار

def message_counter(update: Update, context: CallbackContext): user_id = update.effective_user.id message_count[user_id] += 1 user_data[user_id]['count'] += 1 user_data[user_id]['hours'].add(datetime.datetime.now().hour)

حذف لینک‌های خالی یا بی‌مورد

def is_supported_link(url): return any(domain in url for domain in ['youtube.com', 'youtu.be', 'instagram.com', 'tiktok.com', 'pinterest.com'])

def download_media(url, output_path): ydl_opts = { 'outtmpl': output_path, 'format': 'best[ext=mp4]/best', 'quiet': True, } try: with yt_dlp.YoutubeDL(ydl_opts) as ydl: info = ydl.extract_info(url, download=True) return ydl.prepare_filename(info) except Exception as e: return None

def handle_download(update: Update, context: CallbackContext): message = update.message if message.reply_to_message and message.text.lower().strip() == "دانلود": original_msg = message.reply_to_message link = None if original_msg.entities: for entity in original_msg.entities: if entity.type == MessageEntity.URL: link = original_msg.text[entity.offset:entity.offset + entity.length] break if not link and 'http' in original_msg.text: link = original_msg.text.split()[0]

if link:
        if is_supported_link(link):
            context.bot.send_chat_action(chat_id=message.chat_id, action="upload_video")
            message.reply_text("در حال دانلود ... ⏳")
            file_path = download_media(link, f"{message.message_id}.%(ext)s")
            if file_path and os.path.exists(file_path):
                context.bot.send_document(chat_id=message.chat_id, document=open(file_path, 'rb'))
                os.remove(file_path)
                try:
                    context.bot.delete_message(chat_id=message.chat_id, message_id=original_msg.message_id)
                except:
                    pass
            else:
                message.reply_text("⚠️ مشکلی در دانلود فایل پیش آمد.")
        else:
            message.reply_text("❌ این لینک پشتیبانی نمی‌شود.")
    else:
        try:
            context.bot.delete_message(chat_id=message.chat_id, message_id=original_msg.message_id)
        except:
            pass
        message.reply_text("⚠️ لینک نامعتبر است و حذف شد.")

def main(): updater = Updater("توکن_ربات_اینجا", use_context=True) dp = updater.dispatcher

dp.add_handler(CommandHandler("start", lambda u, c: u.message.reply_text("سلام من ربات ArmanLoyalGuy هستم")))
dp.add_handler(CommandHandler(["بن", "ban"], ban_command))
dp.add_handler(CommandHandler("آمار", stats_handler))
dp.add_handler(CommandHandler("پروفایل", profile))
dp.add_handler(CommandHandler("ترجمه", translate_reply))
dp.add_handler(CommandHandler("پیام_در_گوشی", secret_message))
dp.add_handler(CommandHandler("عکس_خوش_آمد", set_welcome_photo))
dp.add_handler(CommandHandler("متن_خوش_آمد", set_welcome_text))

dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, welcome_new_member))
dp.add_handler(MessageHandler(Filters.text & Filters.reply, handle_download))
dp.add_handler(MessageHandler(Filters.text & (~Filters.command), message_counter))

updater.start_polling()
updater.idle()

if name == 'main': main()

